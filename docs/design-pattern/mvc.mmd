# MVC, MVP, MVVM 패턴 설명 및 JavaScript 코드 예시

**MVC(Model-View-Controller)**와 같은 디자인 패턴(디자인 패턴)은 소프트웨어 개발에서 코드 구조를 정리하고 유지 보수를 쉽게 하기 위해 사용됩니다. 아래에서는 **MVC**, **MVP**,
**MVVM** 세 가지 모델을 설명하고, 각 패턴에 대한 JavaScript 코드 예시를 제공합니다.

## 1. MVC (Model-View-Controller)

- **Model (모델)**: 데이터와 비즈니스 로직을 관리합니다. 데이터의 상태와 관련된 모든 작업을 담당합니다.
- **View (뷰)**: 사용자에게 정보를 표시합니다. **Model**의 데이터를 시각적으로 표현하는 역할을 합니다.
- **Controller (컨트롤러)**: 사용자 입력을 처리하고 **Model**과 **View** 간의 연결 역할을 합니다.

### JavaScript 예시

```javascript
// Model
class Model {
  constructor() {
    this.data = 'Hello, MVC!';
  }
  getData() {
    return this.data;
  }
  setData(newData) {
    this.data = newData;
  }
}

// View
class View {
  render(data) {
    console.log(`View is rendering: ${data}`);
  }
}

// Controller
class Controller {
  constructor(model, view) {
    this.model = model;
    this.view = view;
  }
  updateView() {
    const data = this.model.getData();
    this.view.render(data);
  }
  changeData(newData) {
    this.model.setData(newData);
    this.updateView();
  }
}

// Usage
const model = new Model();
const view = new View();
const controller = new Controller(model, view);

controller.updateView(); // Output: View is rendering: Hello, MVC!
controller.changeData('New Data!'); // Output: View is rendering: New Data!
